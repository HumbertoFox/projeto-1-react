generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Address {
  address_id      Int       @id @default(autoincrement())
  zipcode         String
  residencenumber String    @db.VarChar(50)
  building        String    @db.VarChar(100)
  buildingblock   String    @db.VarChar(50)
  apartment       String    @db.VarChar(50)
  registerdate    DateTime  @default(now()) @db.Timestamp(0)
  address_zipcode Zipcode   @relation(fields: [zipcode], references: [zipcode])
  address_doctor  Doctor[]
  address_patient Patient[]
  address_user    User[]

  @@map("addresss")
}

model Consultation {
  consultation_id      Int      @id @default(autoincrement())
  cpf                  String
  crm                  String
  plan                 String   @db.VarChar(50)
  particular           String   @db.VarChar(50)
  courtesy             String   @db.VarChar(20)
  observation          String
  consultdatestart     String
  consultdateend       String
  patient_id           Int
  user_id              Int
  registerdate         DateTime @default(now()) @db.Timestamp(0)
  consultation_cpf     Cpf      @relation(fields: [cpf], references: [cpf])
  consultation_crm     Crm      @relation(fields: [crm], references: [crm])
  consultation_user    User     @relation(fields: [user_id], references: [user_id])
  consultation_patient Patient  @relation(fields: [patient_id], references: [patient_id])

  @@map("consultations")
}

model Cpf {
  cpf              String         @id @db.VarChar(11)
  name             String         @db.VarChar(100)
  dateofbirth      String
  cpf_consultation Consultation[]
  cpf_doctor       Doctor[]
  cpf_patient      Patient[]
  cpf_user         User[]

  @@map("cpfs")
}

model Crm {
  crm              String         @id @db.VarChar(11)
  crm_doctor       Doctor[]
  crm_consultation Consultation[]

  @@map("crms")
}

model Doctor {
  doctor_id        Int       @id @default(autoincrement())
  crm              String
  cpf              String
  telephone        String
  address_id       Int
  user_id          Int
  registerdate     DateTime  @default(now()) @db.Timestamp(0)
  doctor_address   Address   @relation(fields: [address_id], references: [address_id])
  doctor_cpf       Cpf       @relation(fields: [cpf], references: [cpf])
  doctor_crm       Crm       @relation(fields: [crm], references: [crm])
  doctor_telephone Telephone @relation(fields: [telephone], references: [telephone])
  doctor_user      User      @relation(fields: [user_id], references: [user_id])

  @@map("doctors")
}

model Patient {
  patient_id           Int            @id @default(autoincrement())
  cpf                  String
  telephone            String
  address_id           Int
  registerdate         DateTime       @default(now()) @db.Timestamp(0)
  parient_address      Address        @relation(fields: [address_id], references: [address_id])
  patient_cpf          Cpf            @relation(fields: [cpf], references: [cpf])
  patient_telephone    Telephone      @relation(fields: [telephone], references: [telephone])
  patient_consultation Consultation[]

  @@map("patients")
}

model Telephone {
  telephone         String    @id @db.VarChar(11)
  email             String    @db.VarChar(150)
  telephone_doctor  Doctor[]
  telephone_patient Patient[]
  telephone_user    User[]

  @@map("telephones")
}

model User {
  user_id           Int            @id @default(autoincrement())
  cpf               String
  telephone         String
  password          String         @db.VarChar(200)
  address_id        Int
  registerdate      DateTime       @default(now()) @db.Timestamp(0)
  user_address      Address        @relation(fields: [address_id], references: [address_id])
  user_cpf          Cpf            @relation(fields: [cpf], references: [cpf])
  user_telephone    Telephone      @relation(fields: [telephone], references: [telephone])
  user_doctor       Doctor[]
  user_consultation Consultation[]

  @@map("users")
}

model Zipcode {
  zipcode         String    @id @db.VarChar(11)
  street          String    @db.VarChar(100)
  district        String    @db.VarChar(100)
  city            String    @db.VarChar(100)
  zipcode_address Address[]

  @@map("zipcodes")
}